name: Terraform - Create Resources

on:
  pull_request:
    branches: [ "master" ]
    paths:
      - 'backend-config/**'
      - 'infrastructure/**'
    types: [opened, synchronize, reopened]

  push:
    branches: [ "master" ]
    paths:
      - 'backend-config/**'
      - 'infrastructure/**'

jobs:
  check-commit:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' &&
      (contains(github.event.pull_request.title, '#terraform') ||
       contains(github.event.pull_request.body, '#terraform'))
    steps:
      - run: echo "Pull Request válido para execução do Terraform Workflow."

  # 1. BACKEND PLAN (runs on PR)
  backend-plan:
    if: github.event_name == 'pull_request'
    needs: check-commit
    runs-on: ubuntu-latest
    environment: terraform-plan
    env:
      BACKEND_DIR: "./backend-config"
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Terraform Configuration
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Determine Backend Mode
        run: |
          REAL_BUCKET="tfstate-cluster-redis-jheimmys"
          if aws s3api head-bucket --bucket "$REAL_BUCKET" 2>/dev/null; then
            echo "USE_REAL=true" >> $GITHUB_ENV
          else
            echo "USE_REAL=false" >> $GITHUB_ENV
          fi

      - name: Terraform Init (backend)
        working-directory: ${{ env.BACKEND_DIR }}
        run: |
          if [ "${USE_REAL}" = "true" ]; then
            terraform init \
              -backend-config="bucket=tfstate-cluster-redis-jheimmys" \
              -backend-config="key=cluster-redis/terraform.tfstate" \
              -backend-config="dynamodb_table=terraform-lock" \
              -backend-config="region=${{ secrets.AWS_REGION }}"
          else
            terraform init
          fi

      - name: Terraform Plan (backend)
        working-directory: ${{ env.BACKEND_DIR }}
        run: |
          terraform plan -no-color -lock=false > plan_output.txt
          echo "PLAN_OUTPUT<<EOF" >> $GITHUB_ENV
          cat plan_output.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        id: plan

      - name: Post Plan to PR (backend)
        uses: actions/github-script@v6
        env:
          PLAN_OUTPUT: ${{ env.PLAN_OUTPUT }}
        with:
          script: |
            const output = `### Terraform Plan (Backend)\n\n\`\`\`\n${process.env.PLAN_OUTPUT}\n\`\`\``;
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

  # 2. INFRA PLAN (runs on PR)
  infra-plan:
    if: github.event_name == 'pull_request'
    needs: [check-commit, backend-plan]
    runs-on: ubuntu-latest
    environment: terraform-plan
    env:
      INFRA_DIR: "./infrastructure"
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Terraform Configuration
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Determine State Bucket
        run: |
          REAL_BUCKET="tfstate-cluster-redis-jheimmys"
          if aws s3api head-bucket --bucket "$REAL_BUCKET" 2>/dev/null; then
            echo "STATE_BUCKET=$REAL_BUCKET" >> $GITHUB_ENV
          else
            TEMP_BUCKET="temp-tfstate-${{ github.event.pull_request.number }}-${{ github.run_id }}"
            echo "STATE_BUCKET=$TEMP_BUCKET" >> $GITHUB_ENV
            aws s3api create-bucket \
              --bucket "$TEMP_BUCKET" \
              --region ${{ secrets.AWS_REGION }}
          fi

      - name: Terraform Init (infra)
        working-directory: ${{ env.INFRA_DIR }}
        run: |
          terraform init \
            -backend-config="bucket=${STATE_BUCKET}" \
            -backend-config="key=cluster-redis/terraform.tfstate" \
            -backend-config="region=${{ secrets.AWS_REGION }}" \
            -backend-config="skip_credentials_validation=true" \
            -backend-config="skip_region_validation=true"

      - name: Terraform Plan (infra)
        working-directory: ${{ env.INFRA_DIR }}
        run: |
          terraform plan -no-color -lock=false > plan_output.txt
          echo "INFRA_PLAN_OUTPUT<<EOF" >> $GITHUB_ENV
          cat plan_output.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Post Plan to PR (infra)
        uses: actions/github-script@v6
        env:
          PLAN_OUTPUT: ${{ env.INFRA_PLAN_OUTPUT }}
        with:
          script: |
            const output = `### Terraform Plan (Infra)\n\n\`\`\`\n${process.env.PLAN_OUTPUT}\n\`\`\``;
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

  # 3. BACKEND APPLY (merge na master)
  deploy-backend:
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    env:
      BACKEND_DIR: "./backend-config"
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Terraform Configuration
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Ensure Backend Bucket Exists
        run: |
          REAL_BUCKET="tfstate-cluster-redis-jheimmys"
          if ! aws s3api head-bucket --bucket "$REAL_BUCKET" 2>/dev/null; then
            aws s3api create-bucket \
              --bucket "$REAL_BUCKET" \
              --region ${{ secrets.AWS_REGION }} \
              --create-bucket-configuration LocationConstraint=${{ secrets.AWS_REGION }}
          else
            echo "Bucket existente. Nenhuma ação necessária."
          fi

      - name: Ensure DynamoDB Table Exists
        run: |
          if ! aws dynamodb describe-table --table-name terraform-lock 2>/dev/null; then
            aws dynamodb create-table \
              --table-name terraform-lock \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST
          else
            echo "Tabela DynamoDB existente. Nenhuma ação necessária."
          fi

      - name: Terraform Init (backend)
        working-directory: ${{ env.BACKEND_DIR }}
        run: terraform init

      - name: Terraform Apply (backend)
        working-directory: ${{ env.BACKEND_DIR }}
        run: terraform apply -auto-approve

      - name: Export Bucket Name
        working-directory: ${{ env.BACKEND_DIR }}
        run: echo "bucket_name=$(terraform output -raw s3_bucket_name)" >> $GITHUB_OUTPUT

  # 4. INFRA APPLY (merge na master)
  deploy-infra:
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    needs: deploy-backend
    runs-on: ubuntu-latest
    env:
      INFRA_DIR: "./infrastructure"
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Terraform Configuration
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init (infra)
        working-directory: ${{ env.INFRA_DIR }}
        run: terraform init \
             -backend-config="bucket=${{ needs.deploy-backend.outputs.bucket_name }}" \
             -backend-config="key=cluster-redis/terraform.tfstate" \
             -backend-config="region=${{ secrets.AWS_REGION }}"

      - name: Terraform Apply (infra)
        working-directory: ${{ env.INFRA_DIR }}
        run: terraform apply -auto-approve

      - name: Configure EKS Access
        working-directory: ${{ env.INFRA_DIR }}
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}
          kubectl get nodes