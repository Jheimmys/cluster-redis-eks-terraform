name: Terraform - CI/CD with PR Approval

on:
  pull_request:
    branches: [ "main" ]
    types: [opened, synchronize, reopened]
  push:
    branches: [ "main" ]

jobs:
  # Backend Plan (runs on PR)
  backend-plan:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    environment: terraform-plan
    env:
      BACKEND_DIR: "./backend-config"

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Terraform Configuration
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.11.0

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Terraform Init
      working-directory: ${{ env.BACKEND_DIR }}
      run: terraform init

    - name: Terraform Plan
      working-directory: ${{ env.BACKEND_DIR }}
      run: terraform plan -no-color
      id: plan

    - name: Post Plan to PR
      uses: actions/github-script@v6
      with:
        script: |
          const output = `### Terraform Plan (Backend) 📝\n\n\`\`\`\n${steps.plan.outputs.stdout}\n\`\`\``;
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          });

  # Infra Plan (runs on PR)
  infra-plan:
    if: github.event_name == 'pull_request'
    needs: backend-plan
    runs-on: ubuntu-latest
    environment: terraform-plan
    env:
      INFRA_DIR: "./infrastructure"

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Terraform Configuration
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.11.0

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Terraform Init
      working-directory: ${{ env.INFRA_DIR }}
      run: terraform init -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}"

    - name: Terraform Plan
      working-directory: ${{ env.INFRA_DIR }}
      run: terraform plan -no-color
      id: plan

    - name: Post Plan to PR
      uses: actions/github-script@v6
      with:
        script: |
          const output = `### Terraform Plan (Infra) 📝\n\n\`\`\`\n${steps.plan.outputs.stdout}\n\`\`\``;
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          });

  # Backend Apply (runs on merge to main)
  deploy-backend:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: deploy-backend
    env:
      BACKEND_DIR: "./backend-config"

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Terraform Configuration
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.11.0

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Terraform Init
      working-directory: ${{ env.BACKEND_DIR }}
      run: terraform init

    - name: Terraform Apply
      working-directory: ${{ env.BACKEND_DIR }}
      run: terraform apply -auto-approve

    - name: Export Bucket Name
      working-directory: ${{ env.BACKEND_DIR }}
      run: echo "BUCKET_NAME=$(terraform output -raw s3_bucket_name)" >> $GITHUB_ENV

  # Infra Apply (runs on merge to main)
  deploy-infra:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: deploy-backend
    runs-on: ubuntu-latest
    environment: deploy-infra
    env:
      INFRA_DIR: "./infrastructure"

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Terraform Configuration
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.11.0

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Terraform Init
      working-directory: ${{ env.INFRA_DIR }}
      run: terraform init -backend-config="bucket=${{ needs.deploy-backend.outputs.bucket_name }}"

    - name: Terraform Apply
      working-directory: ${{ env.INFRA_DIR }}
      run: terraform apply -auto-approve

    - name: Configure EKS Access
      working-directory: ${{ env.INFRA_DIR }}
      run: |
        aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}
        kubectl get nodes

  ### -------------------------------- ###

  # Destroy Infra Resources
  destroy-infra:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    environment: destroy-infra
    if: ${{ github.event.inputs.action == 'destroy-infra' }}
    env:
      INFRA_DIR: "./infrastructure"

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Terraform Configuration
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.11.0

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Terraform Init
      working-directory: ${{ env.INFRA_DIR }}
      run: terraform init -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}"

    - name: Terraform Destroy
      working-directory: ${{ env.INFRA_DIR }}
      run: terraform destroy -auto-approve

  # Destroy Backend Resources
  destroy-backend:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    environment: destroy-backend
    if: ${{ github.event.inputs.action == 'destroy-backend' }}
    env:
      BACKEND_DIR: "./backend-config"

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Terraform Configuration
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.11.0

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Terraform Init
      working-directory: ${{ env.BACKEND_DIR }}
      run: terraform init

    - name: Empty S3 Bucket via AWS CLI
      run: aws s3 rm s3://${{ secrets.TF_STATE_BUCKET }} --recursive
      
    - name: Import S3 Bucket
      working-directory: ${{ env.BACKEND_DIR }}
      run: terraform import aws_s3_bucket.tf_state ${{ secrets.TF_STATE_BUCKET }}

    - name: Import DynamoDB Table
      working-directory: ${{ env.BACKEND_DIR }}
      run: terraform import aws_dynamodb_table.tf_lock ${{ secrets.DYNAMODB_LOCK_TABLE }}

    - name: Terraform Destroy
      working-directory: ${{ env.BACKEND_DIR }}
      run: terraform destroy -auto-approve