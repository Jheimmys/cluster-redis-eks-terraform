name: Terraform - CI/CD

on:
  workflow_dispatch:
    inputs:
      action:
        type: choice
        description: "Select action"
        required: true
        options:
          - deploy-backend-infra
          - destroy-infra
          - destroy-backend

jobs:
  # Backend creation resources (S3, Dynamo table)
  deploy-backend:
    runs-on: ubuntu-latest
    environment: deploy-backend
    timeout-minutes: 60
    if: ${{ github.event.inputs.action == 'deploy' }}
    env:
      BACKEND_DIR: "./backend-config"

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Terraform Configuration
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.11.0

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Terraform format
      working-directory: ${{ env.BACKEND_DIR }}
      run: terraform fmt --recursive

    - name: Terraform init
      working-directory: ${{ env.BACKEND_DIR }}
      run: terraform init  

    - name: Terraform Validate
      working-directory: ${{ env.BACKEND_DIR }}
      run: terraform validate

    - name: Terraform Plan
      working-directory: ${{ env.BACKEND_DIR }}
      run: terraform plan -out=tfplan

    - name: Terraform Apply
      working-directory: ${{ env.BACKEND_DIR }}
      run: terraform apply -auto-approve tfplan

    - name: Export Bucket Name
      working-directory: ${{ env.BACKEND_DIR }}
      run: echo "BUCKET_NAME=$(terraform output -raw s3_bucket_name)" >> $GITHUB_ENV

    - name: Set Output Variable
      working-directory: ${{ env.BACKEND_DIR }}
      id: backend_outputs
      run: echo "bucket_name=$(terraform output -raw s3_bucket_name)" >> $GITHUB_OUTPUT

    outputs:
      bucket_name: ${{ steps.backend_outputs.outputs.bucket_name }}

  ## Infra creation resources (VPC, EKS)
  deploy-infra:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    environment: deploy-infra
    if: ${{ github.event.inputs.action == 'deploy' }}
    needs: deploy-backend # Waiting backend stay ready
    env:
      INFRA_DIR: "./infrastructure"

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Terraform Configuration
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.11.0

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Terraform init
      working-directory: ${{ env.INFRA_DIR }}
      run: terraform init -backend-config="bucket=${{ needs.deploy-backend.outputs.bucket_name }}"  

    - name: Terraform Validate
      working-directory: ${{ env.INFRA_DIR }}
      run: terraform validate

    - name: Terraform Plan
      working-directory: ${{ env.INFRA_DIR }}
      run: terraform plan -out=tfplan

    - name: Terraform Apply
      working-directory: ${{ env.INFRA_DIR }}
      run: terraform apply tfplan

    - name: Authentication EKS
      working-directory: ${{ env.INFRA_DIR }}
      run: aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

    - name: Command Test Access EKS
      working-directory: ${{ env.INFRA_DIR }}
      run: kubectl get nodes

### -------------------------------- ###

  # Destroy Infra Resources
  destroy-infra:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    environment: destroy-infra
    if: ${{ github.event.inputs.action == 'destroy-infra' }}
    env:
      INFRA_DIR: "./infrastructure"

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Terraform Configuration
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.11.0

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Terraform Init
      working-directory: ${{ env.INFRA_DIR }}
      run: terraform init -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}"

    - name: Terraform Destroy
      working-directory: ${{ env.INFRA_DIR }}
      run: terraform destroy -auto-approve

  # Destroy Backend Resources
  destroy-backend:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    environment: destroy-backend
    if: ${{ github.event.inputs.action == 'destroy-backend' }}
    env:
      BACKEND_DIR: "./backend-config"

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Terraform Configuration
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.11.0

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Terraform Init
      working-directory: ${{ env.BACKEND_DIR }}
      run: terraform init

    - name: Empty S3 Bucket via AWS CLI
      run: aws s3 rm s3://${{ secrets.TF_STATE_BUCKET }} --recursive
      
    - name: Import S3 Bucket
      working-directory: ${{ env.BACKEND_DIR }}
      run: terraform import aws_s3_bucket.tf_state ${{ secrets.TF_STATE_BUCKET }}

    - name: Import DynamoDB Table
      working-directory: ${{ env.BACKEND_DIR }}
      run: terraform import aws_dynamodb_table.tf_lock ${{ secrets.DYNAMODB_LOCK_TABLE }}

    - name: Terraform Destroy
      working-directory: ${{ env.BACKEND_DIR }}
      run: terraform destroy -auto-approve